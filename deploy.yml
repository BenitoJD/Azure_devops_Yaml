trigger:
- none

variables:
  # Build Information
  BuildNumber: '$(Build.BuildNumber)'
  BranchName: '$(Build.SourceBranchName)'
  
  # Paths
  DeploymentBasePath: 'D:\Deployments'
  BackupBasePath: 'D:\Backups'
  
  # 4 Stakeholder Websites
  Stakeholder1.Name: 'Finance'
  Stakeholder1.Port: '8091'
  Stakeholder1.PhysicalPath: 'D:\inetpub\wwwroot\Finance.Main'
  Stakeholder1.AppPoolName: 'FinanceAppPool'
  
  Stakeholder2.Name: 'Operations'
  Stakeholder2.Port: '8092'
  Stakeholder2.PhysicalPath: 'D:\inetpub\wwwroot\Operations.Main'
  Stakeholder2.AppPoolName: 'OperationsAppPool'
  
  Stakeholder3.Name: 'Management'
  Stakeholder3.Port: '8093'
  Stakeholder3.PhysicalPath: 'D:\inetpub\wwwroot\Management.Main'
  Stakeholder3.AppPoolName: 'ManagementAppPool'
  
  Stakeholder4.Name: 'Partners'
  Stakeholder4.Port: '8094'
  Stakeholder4.PhysicalPath: 'D:\inetpub\wwwroot\Partners.Main'
  Stakeholder4.AppPoolName: 'PartnersAppPool'

resources:
 pipelines:
   - pipeline: 'MasterData.Main'
     project: 'MasterData'
     source: 'MasterData.Main'
     branch: 'MDVersionUpgrade/Lonestar'

stages:
  - stage: DeployWebsites
    displayName: 'Deploy 4 Stakeholder Websites'
    
    jobs:
      - deployment: DeployStakeholders
        displayName: 'Deploy All Websites'
        workspace:
          clean: all
        environment: 
          name: SIT
          resourceType: virtualMachine
        strategy:
         runOnce:
           deploy:
             steps:
               - checkout: none
               
               # Download Build Artifacts
               - download: 'MasterData.Main'
                 displayName: 'Download Build Artifacts'
                 artifact: 'drop'
               
               # Backup Current Deployments
               - task: PowerShell@2
                 displayName: 'Backup Current Deployments'
                 inputs:
                   targetType: 'inline'
                   script: |
                     $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
                     
                     # Create backup directory
                     if (-not (Test-Path "$(BackupBasePath)")) {
                       New-Item -ItemType Directory -Path "$(BackupBasePath)" -Force | Out-Null
                     }
                     
                     $stakeholders = @(
                       @{Name="$(Stakeholder1.Name)"; Path="$(Stakeholder1.PhysicalPath)"},
                       @{Name="$(Stakeholder2.Name)"; Path="$(Stakeholder2.PhysicalPath)"},
                       @{Name="$(Stakeholder3.Name)"; Path="$(Stakeholder3.PhysicalPath)"},
                       @{Name="$(Stakeholder4.Name)"; Path="$(Stakeholder4.PhysicalPath)"}
                     )
                     
                     foreach ($stakeholder in $stakeholders) {
                       $backupPath = "$(BackupBasePath)\$($stakeholder.Name)_$timestamp"
                       
                       if (Test-Path $stakeholder.Path) {
                         Write-Host "Backing up $($stakeholder.Name)..." -ForegroundColor Cyan
                         New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
                         Copy-Item -Path "$($stakeholder.Path)\*" -Destination $backupPath -Recurse -Force
                         Write-Host "Backup completed for $($stakeholder.Name)" -ForegroundColor Green
                       }
                     }
                   errorActionPreference: 'continue'
               
               # Create Directories
               - task: PowerShell@2
                 displayName: 'Create Required Directories'
                 inputs:
                   targetType: 'inline'
                   script: |
                     $directories = @(
                       "$(Stakeholder1.PhysicalPath)",
                       "$(Stakeholder2.PhysicalPath)",
                       "$(Stakeholder3.PhysicalPath)",
                       "$(Stakeholder4.PhysicalPath)",
                       "$(DeploymentBasePath)"
                     )
                     
                     foreach ($dir in $directories) {
                       if (-not (Test-Path $dir)) {
                         New-Item -ItemType Directory -Path $dir -Force | Out-Null
                         Write-Host "Created: $dir" -ForegroundColor Green
                       }
                     }
               
               # Extract Artifacts
               - task: ExtractFiles@1
                 displayName: 'Extract Build Artifacts'
                 inputs:
                   archiveFilePatterns: '$(Pipeline.Workspace)/MasterData.Main/drop/*.zip'
                   destinationFolder: '$(DeploymentBasePath)'
                   cleanDestinationFolder: true
                   overwriteExistingFiles: true
               
               # Configure IIS
               - task: PowerShell@2
                 displayName: 'Configure IIS Websites'
                 inputs:
                   targetType: 'inline'
                   script: |
                     # Try to import WebAdministration module
                     try {
                       Import-Module WebAdministration -ErrorAction Stop
                       Write-Host "WebAdministration module loaded successfully" -ForegroundColor Green
                     } catch {
                       Write-Host "WebAdministration module not available, using alternative method" -ForegroundColor Yellow
                       # Use appcmd.exe instead
                       $useAppCmd = $true
                     }
                     
                     $stakeholders = @(
                       @{Name="$(Stakeholder1.Name)"; Port="$(Stakeholder1.Port)"; Path="$(Stakeholder1.PhysicalPath)"; AppPool="$(Stakeholder1.AppPoolName)"},
                       @{Name="$(Stakeholder2.Name)"; Port="$(Stakeholder2.Port)"; Path="$(Stakeholder2.PhysicalPath)"; AppPool="$(Stakeholder2.AppPoolName)"},
                       @{Name="$(Stakeholder3.Name)"; Port="$(Stakeholder3.Port)"; Path="$(Stakeholder3.PhysicalPath)"; AppPool="$(Stakeholder3.AppPoolName)"},
                       @{Name="$(Stakeholder4.Name)"; Port="$(Stakeholder4.Port)"; Path="$(Stakeholder4.PhysicalPath)"; AppPool="$(Stakeholder4.AppPoolName)"}
                     )
                     
                     foreach ($stakeholder in $stakeholders) {
                       Write-Host "Configuring $($stakeholder.Name)..." -ForegroundColor Cyan
                       
                       if ($useAppCmd) {
                         # Use appcmd.exe for IIS management
                         try {
                           # Create Application Pool
                           & "C:\Windows\System32\inetsrv\appcmd.exe" add apppool /name:$($stakeholder.AppPool) /managedRuntimeVersion:v4.0 /managedPipelineMode:Integrated
                           Write-Host "Created App Pool: $($stakeholder.AppPool)" -ForegroundColor Green
                         } catch {
                           Write-Host "App Pool may already exist: $($stakeholder.AppPool)" -ForegroundColor Yellow
                         }
                         
                         try {
                           # Create Website
                           & "C:\Windows\System32\inetsrv\appcmd.exe" add site /name:$($stakeholder.Name) /physicalPath:$($stakeholder.Path) /bindings:http/*:$($stakeholder.Port):
                           & "C:\Windows\System32\inetsrv\appcmd.exe" set app "$($stakeholder.Name)/" /applicationPool:$($stakeholder.AppPool)
                           Write-Host "Created Website: $($stakeholder.Name)" -ForegroundColor Green
                         } catch {
                           Write-Host "Website may already exist: $($stakeholder.Name)" -ForegroundColor Yellow
                         }
                       } else {
                         # Use PowerShell cmdlets
                         try {
                           # Create Application Pool
                           New-WebAppPool -Name $stakeholder.AppPool -ErrorAction SilentlyContinue
                           Set-ItemProperty "IIS:\AppPools\$($stakeholder.AppPool)" -Name managedRuntimeVersion -Value "v4.0"
                           Set-ItemProperty "IIS:\AppPools\$($stakeholder.AppPool)" -Name managedPipelineMode -Value "Integrated"
                           Write-Host "Created App Pool: $($stakeholder.AppPool)" -ForegroundColor Green
                         } catch {
                           Write-Host "App Pool may already exist: $($stakeholder.AppPool)" -ForegroundColor Yellow
                         }
                         
                         try {
                           # Create Website
                           New-Website -Name $stakeholder.Name -PhysicalPath $stakeholder.Path -ApplicationPool $stakeholder.AppPool -Port $stakeholder.Port -ErrorAction SilentlyContinue
                           Write-Host "Created Website: $($stakeholder.Name)" -ForegroundColor Green
                         } catch {
                           Write-Host "Website may already exist: $($stakeholder.Name)" -ForegroundColor Yellow
                         }
                       }
                       
                       Write-Host "$($stakeholder.Name) configured" -ForegroundColor Green
                     }
               
               # Deploy Files
               - task: PowerShell@2
                 displayName: 'Deploy Files to All Websites'
                 inputs:
                   targetType: 'inline'
                   script: |
                     $stakeholders = @(
                       @{Name="$(Stakeholder1.Name)"; Source="$(DeploymentBasePath)"; Dest="$(Stakeholder1.PhysicalPath)"},
                       @{Name="$(Stakeholder2.Name)"; Source="$(DeploymentBasePath)"; Dest="$(Stakeholder2.PhysicalPath)"},
                       @{Name="$(Stakeholder3.Name)"; Source="$(DeploymentBasePath)"; Dest="$(Stakeholder3.PhysicalPath)"},
                       @{Name="$(Stakeholder4.Name)"; Source="$(DeploymentBasePath)"; Dest="$(Stakeholder4.PhysicalPath)"}
                     )
                     
                     foreach ($stakeholder in $stakeholders) {
                       Write-Host "Deploying to $($stakeholder.Name)..." -ForegroundColor Cyan
                       
                       # Clear and copy files
                       if (Test-Path $stakeholder.Dest) {
                         Get-ChildItem -Path $stakeholder.Dest -Exclude "App_Data" | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
                       }
                       Copy-Item -Path "$($stakeholder.Source)\*" -Destination $stakeholder.Dest -Recurse -Force
                       
                       Write-Host "$($stakeholder.Name) deployed successfully" -ForegroundColor Green
                     }
               
               # Set Permissions
               - task: PowerShell@2
                 displayName: 'Set Folder Permissions'
                 inputs:
                   targetType: 'inline'
                   script: |
                     $paths = @(
                       "$(Stakeholder1.PhysicalPath)",
                       "$(Stakeholder2.PhysicalPath)",
                       "$(Stakeholder3.PhysicalPath)",
                       "$(Stakeholder4.PhysicalPath)"
                     )
                     
                     foreach ($path in $paths) {
                       $acl = Get-Acl $path
                       $iisUsersRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS","FullControl","ContainerInherit,ObjectInherit","None","Allow")
                       $acl.SetAccessRule($iisUsersRule)
                       Set-Acl $path $acl
                       Write-Host "Permissions set for: $path" -ForegroundColor Green
                     }
               
               # Start Services
               - task: PowerShell@2
                 displayName: 'Start All Websites'
                 inputs:
                   targetType: 'inline'
                   script: |
                     # Try to import WebAdministration module
                     try {
                       Import-Module WebAdministration -ErrorAction Stop
                       Write-Host "WebAdministration module loaded successfully" -ForegroundColor Green
                       $usePowerShell = $true
                     } catch {
                       Write-Host "WebAdministration module not available, using appcmd.exe" -ForegroundColor Yellow
                       $usePowerShell = $false
                     }
                     
                     $stakeholders = @(
                       @{Name="$(Stakeholder1.Name)"; AppPool="$(Stakeholder1.AppPoolName)"},
                       @{Name="$(Stakeholder2.Name)"; AppPool="$(Stakeholder2.AppPoolName)"},
                       @{Name="$(Stakeholder3.Name)"; AppPool="$(Stakeholder3.AppPoolName)"},
                       @{Name="$(Stakeholder4.Name)"; AppPool="$(Stakeholder4.AppPoolName)"}
                     )
                     
                     foreach ($stakeholder in $stakeholders) {
                       if ($usePowerShell) {
                         # Use PowerShell cmdlets
                         Start-WebAppPool -Name $stakeholder.AppPool
                         Start-Website -Name $stakeholder.Name
                       } else {
                         # Use appcmd.exe
                         & "C:\Windows\System32\inetsrv\appcmd.exe" start apppool /apppool.name:$($stakeholder.AppPool)
                         & "C:\Windows\System32\inetsrv\appcmd.exe" start site /site.name:$($stakeholder.Name)
                       }
                       Write-Host "$($stakeholder.Name) started" -ForegroundColor Green
                     }
                     
                     Write-Host "All websites deployed successfully!" -ForegroundColor Green
                     Write-Host "Finance: http://localhost:$(Stakeholder1.Port)" -ForegroundColor White
                     Write-Host "Operations: http://localhost:$(Stakeholder2.Port)" -ForegroundColor White
                     Write-Host "Management: http://localhost:$(Stakeholder3.Port)" -ForegroundColor White
                     Write-Host "Partners: http://localhost:$(Stakeholder4.Port)" -ForegroundColor White